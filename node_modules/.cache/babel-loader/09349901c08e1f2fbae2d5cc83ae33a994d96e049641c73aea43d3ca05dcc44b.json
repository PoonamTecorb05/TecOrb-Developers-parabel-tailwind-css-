{"ast":null,"code":"import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  } // Find current slide size\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","map":{"version":3,"names":["now","nextTick","onTouchEnd","event","swiper","data","touchEventsData","params","touches","rtlTranslate","rtl","slidesGrid","enabled","e","originalEvent","allowTouchCallbacks","emit","isTouched","isMoved","grabCursor","setGrabCursor","startMoving","allowSlideNext","allowSlidePrev","touchEndTime","timeDiff","touchStartTime","allowClick","pathTree","path","composedPath","updateClickedSlide","target","lastClickTime","destroyed","swipeDirection","diff","currentTranslate","startTranslate","currentPos","followFinger","translate","cssMode","freeMode","stopIndex","groupSize","slidesSizesGrid","i","length","slidesPerGroupSkip","slidesPerGroup","increment","rewindFirstIndex","rewindLastIndex","rewind","isBeginning","virtual","slides","isEnd","ratio","longSwipesMs","longSwipes","slideTo","activeIndex","longSwipesRatio","Math","abs","shortSwipes","isNavButtonTarget","navigation","nextEl","prevEl"],"sources":["/home/tecorb/Desktop/project/tailwind-css-project/parabel/node_modules/swiper/core/events/onTouchEnd.js"],"sourcesContent":["import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}